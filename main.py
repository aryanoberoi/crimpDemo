# Import necessary libraries
import numpy as np
import matplotlib.pyplot as plt
from ipywidgets import interact, IntSlider, FloatSlider

# (Optional in a Notebook: display plots inline)
%matplotlib inline

def draw_variable_D(ax, r, theta_arc, offset=(0, 0), chord_color='black', arc_color='blue'):
    """
    Draws a "D-shape" variation with a chord plus an arc of angle theta_arc (in radians).
    
    The shape is constructed as follows:
      - A vertical straight chord from A = (offset_x, offset_y) to 
        B = (offset_x, offset_y + 2*r*sin(theta_arc/2)).
      - A circular arc connecting A to B that is part of a circle of radius r.
      
    The circle’s center is determined so that the chord AB subtends an angle of theta_arc.
    With our configuration:
         A = (0,0)
         B = (0, 2r*sin(theta_arc/2))
         Midpoint of chord = (0, r*sin(theta_arc/2))
         Distance from chord midpoint to center = r*cos(theta_arc/2)
         So the center is:
             C = (r*cos(theta_arc/2), r*sin(theta_arc/2))  (with offset added)
    The arc is then drawn from A to B. One can show that the required arc on the right-hand 
    side of the chord is generated by taking angles from:
         start_angle = π + theta_arc/2   to   end_angle = π - theta_arc/2.
    
    Parameters:
      ax        : matplotlib Axes on which to draw.
      r         : The circle’s radius.
      theta_arc : The central angle (in radians) of the arc.
      offset    : (x0,y0) coordinate of the lower endpoint A of the chord.
      chord_color, arc_color : Colors for chord and arc.
    """
    x0, y0 = offset
    
    # Compute chord endpoints
    chord_length = 2 * r * np.sin(theta_arc/2)
    A = np.array([x0, y0])
    B = np.array([x0, y0 + chord_length])
    
    # Compute the circle center.
    # With our geometry, the chord’s midpoint is at (x0, y0 + r*sin(theta_arc/2)).
    # The center lies horizontally to the right by r*cos(theta_arc/2).
    C = np.array([x0 + r * np.cos(theta_arc/2), y0 + r * np.sin(theta_arc/2)])
    
    # Draw the chord (the straight side)
    ax.plot([A[0], B[0]], [A[1], B[1]], color=chord_color, linewidth=2, label='Chord')
    
    # Define the arc:
    # We choose the arc to run from A to B along the circle.
    # With our configuration, one can take:
    start_angle = np.pi + theta_arc/2
    end_angle   = np.pi - theta_arc/2
    t = np.linspace(start_angle, end_angle, 200)
    x_arc = C[0] + r * np.cos(t)
    y_arc = C[1] + r * np.sin(t)
    ax.plot(x_arc, y_arc, color=arc_color, linewidth=2, label='Arc')
    
    # Optionally, plot the center and endpoints
    ax.plot(C[0], C[1], 'ko', markersize=4, label='Center')
    ax.plot(A[0], A[1], 'ko', markersize=4)
    ax.plot(B[0], B[1], 'ko', markersize=4)
    
    # (Optional) Uncomment to draw the full circle (dashed)
    # t_full = np.linspace(0, 2*np.pi, 300)
    # ax.plot(C[0] + r*np.cos(t_full), C[1] + r*np.sin(t_full), 'gray', linestyle='--', linewidth=0.5)

def update_plot(L_total=100.0, n=1, theta_deg=180):
    """
    Updated function to ensure that the entire shape remains visible in the plot.
    """
    theta_arc = np.deg2rad(theta_deg)  # convert degrees to radians
    L_segment = L_total / n  # wire length per shape
    
    # Compute r so that:
    # 2*r*sin(theta_arc/2) + r*theta_arc = L_segment
    r = L_segment / (2 * np.sin(theta_arc/2) + theta_arc)
    
    chord_length = 2 * r * np.sin(theta_arc/2)
    arc_length   = r * theta_arc
    
    # Set up the plot
    fig, ax = plt.subplots(figsize=(6, 6))
    draw_variable_D(ax, r, theta_arc, offset=(0, 0))

    ax.set_aspect('equal')
    
    # Dynamically adjust the plot limits to fit the shape properly
    x_min = -1.2 * r  # Extend leftward for better visibility
    x_max = 1.2 * (r + r * np.cos(theta_arc/2))  # Extend rightward based on arc
    y_min = -0.2 * r  # Small margin below the chord
    y_max = chord_length + 0.3 * r  # Extend upwards for better fit

    ax.set_xlim(x_min, x_max)
    ax.set_ylim(y_min, y_max)
    
    # Set labels and title with computed values.
    ax.set_xlabel("x")
    ax.set_ylabel("y")
    ax.grid(True)
    ax.set_title(f"Total Wire Length = {L_total}\n"
                 f"n = {n} shape(s): L_segment = {L_segment:.2f}\n"
                 f"Arc Angle = {theta_deg}°  (={theta_arc:.2f} rad)\n"
                 f"r = {r:.2f}, chord = {chord_length:.2f}, arc = {arc_length:.2f}")
    
    plt.show()


# Create interactive widgets to adjust L_total, n, and theta_deg.
interact(update_plot,
         L_total=FloatSlider(min=10, max=200, step=1, value=100, description='Total Wire Length'),
         n=IntSlider(min=1, max=10, step=1, value=1, description='Number of Shapes'),
         theta_deg=IntSlider(min=30, max=180, step=1, value=180, description='Arc Angle (deg)'));
